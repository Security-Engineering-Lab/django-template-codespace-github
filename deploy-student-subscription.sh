#!/bin/bash

echo "üöÄ Deploying to Azure Container Instances (Student Subscription)..."

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Azure CLI —á–µ—Ä–µ–∑ apt (–Ω–∞–¥—ñ–π–Ω–∏–π —Å–ø–æ—Å—ñ–±)
if ! command -v az &> /dev/null; then
    echo "üì¶ Installing Azure CLI via apt..."
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–∏—Å—Ç–µ–º—É
    sudo apt-get update -y
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg -y
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∫–ª—é—á—ñ–≤
    sudo mkdir -p /etc/apt/keyrings
    
    # –î–æ–¥–∞—î–º–æ Microsoft GPG –∫–ª—é—á
    curl -sLS https://packages.microsoft.com/keys/microsoft.asc | \
        gpg --dearmor | \
        sudo tee /etc/apt/keyrings/microsoft.gpg > /dev/null
    sudo chmod go+r /etc/apt/keyrings/microsoft.gpg
    
    # –î–æ–¥–∞—î–º–æ Azure CLI —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
    AZ_REPO=$(lsb_release -cs)
    echo "deb [arch=`dpkg --print-architecture` signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
        sudo tee /etc/apt/sources.list.d/azure-cli.list
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø–∞–∫–µ—Ç—ñ–≤ —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Azure CLI
    sudo apt-get update -y
    sudo apt-get install azure-cli -y
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
    if command -v az &> /dev/null; then
        echo "‚úÖ Azure CLI installed successfully!"
    else
        echo "‚ùå Azure CLI installation failed. Trying alternative method..."
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ snap
        sudo snap install azure-cli --classic
    fi
else
    echo "‚úÖ Azure CLI already installed"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ—Ä—Å—ñ—é
az version --output table || echo "‚ö†Ô∏è Azure CLI installed but version check failed"

RESOURCE_GROUP="rg-django-fixed"
CONTAINER_NAME="django-fixed-$(date +%s)"
LOCATION="Central US"

echo "üìã Configuration:"
echo "   Resource Group: $RESOURCE_GROUP"
echo "   Container Name: $CONTAINER_NAME"
echo "   Location: $LOCATION"

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Azure CLI
if ! command -v az &> /dev/null; then
    echo "Installing Azure CLI..."
    sudo apt-get update && sudo apt-get install azure-cli -y
fi

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
echo "üîê Checking Azure login..."
if ! az account show &> /dev/null; then
    echo "Please login to Azure:"
    az login --use-device-code
fi

# –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏
echo "üìä Available subscriptions:"
az account list --output table

# –î–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤–∏–±—Ä–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É
echo ""
read -p "Enter subscription name or ID (or press Enter for current): " SUBSCRIPTION_INPUT

if [ ! -z "$SUBSCRIPTION_INPUT" ]; then
    echo "üîÑ Switching to subscription: $SUBSCRIPTION_INPUT"
    az account set --subscription "$SUBSCRIPTION_INPUT"
fi

# –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É
CURRENT_SUBSCRIPTION=$(az account show --query name -o tsv)
echo "‚úÖ Using subscription: $CURRENT_SUBSCRIPTION"

# –†–µ—î—Å—Ç—Ä—É—î–º–æ providers
echo "üìù Registering providers..."
az provider register --namespace Microsoft.ContainerInstance --output none
az provider register --namespace Microsoft.Web --output none

# –°—Ç–≤–æ—Ä—é—î–º–æ resource group
echo "üèóÔ∏è Creating resource group..."
az group create --name $RESOURCE_GROUP --location "$LOCATION" --output table

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
echo "üöÄ Creating container..."
az container create \
    --resource-group $RESOURCE_GROUP \
    --name $CONTAINER_NAME \
    --image "mcr.microsoft.com/azuredocs/aci-helloworld:latest" \
    --cpu 0.5 \
    --memory 0.5 \
    --ip-address public \
    --ports 80 \
    --location "$LOCATION" \
    --output table

# –ß–µ–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
echo "‚è≥ Waiting for container to start..."
sleep 60

# –û—Ç—Ä–∏–º—É—î–º–æ IP
echo "üìç Getting container details..."
CONTAINER_INFO=$(az container show \
    --resource-group $RESOURCE_GROUP \
    --name $CONTAINER_NAME \
    --query "{ip:ipAddress.ip,state:instanceView.state}" \
    --output json)

CONTAINER_IP=$(echo $CONTAINER_INFO | python3 -c "import sys, json; print(json.load(sys.stdin).get('ip', 'N/A'))")
CONTAINER_STATE=$(echo $CONTAINER_INFO | python3 -c "import sys, json; print(json.load(sys.stdin).get('state', 'Unknown'))")

echo "üìä Container Status: $CONTAINER_STATE"

if [ "$CONTAINER_IP" != "N/A" ] && [ "$CONTAINER_IP" != "null" ]; then
    echo "‚úÖ Container deployed successfully!"
    echo "üåê Your app: http://$CONTAINER_IP"
    echo "üí∞ Cost: ~$3-5/month"
    echo "üìä Resource Group: $RESOURCE_GROUP"
    echo "üè∑Ô∏è Container Name: $CONTAINER_NAME"
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    echo "üîç Testing connection..."
    sleep 30
    HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://$CONTAINER_IP" --connect-timeout 10 || echo "000")
    
    if [ "$HTTP_STATUS" -eq 200 ]; then
        echo "‚úÖ Connection test passed! Your app is running."
    else
        echo "‚ö†Ô∏è Connection test failed: HTTP $HTTP_STATUS"
        echo "Container might still be starting. Try again in a few minutes."
    fi
else
    echo "‚ùå Failed to get container IP"
    echo "üîç Checking container status..."
    az container show --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --output table
    
    echo "üîç Checking container logs..."
    az container logs --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME
fi

echo ""
echo "üìù Useful commands:"
echo "   View status: az container show --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --output table"
echo "   View logs: az container logs --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME"
echo "   Restart: az container restart --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME"
echo "   Delete all: az group delete --name $RESOURCE_GROUP --yes --no-wait"



